pragma solidity ^0.5.2;
pragma experimental ABIEncoderV2;


/*
Operations to do with EVM memory. This library uses 0x40 as free memory pointer just as LLL and
Solidity, but only for storage; it always reads the value from MSIZE. Allocation will allocate new
memory from free memory by expanding it and then updating the free memory pointer with the new address.
*/
library MemOps {

    uint constant internal WORD_SIZE = 32;

    /*
    Allocates 'words' words of memory.
    */
    function allocate32(uint words) internal pure returns (uint addr) {
        uint numBytes = words * WORD_SIZE;
        assembly {
            // free memory address 0x40 - constants doesn't work in inline assembly.
            addr := mload(0x40)
            // addr is a free memory pointer 
            mstore(0x40, add(addr, numBytes))
        }
    }

    // Copies 'words*32' bytes from 'srcPtr' to 'destPtr'.
    // NOTE: This function does not check if memory is allocated, it only copies the bytes.
    function memcopy32(uint srcPtr, uint destPtr, uint words) internal pure {
        // Copy word-length chunks.
        for (uint i = 0; i < words; i++) {
            uint mp = i * WORD_SIZE;
            assembly {
                mstore(add(destPtr, mp), mload(add(srcPtr, mp)))
            }
        }
    }
}
