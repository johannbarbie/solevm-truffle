pragma solidity ^0.4.24;


library MerkleProof {
    /**
     * @dev Verifies a Merkle proof proving the existence of a leaf in a Merkle tree
     * @param proof Merkle proof containing sibling hashes on the branch from the leaf to the root of the Merkle tree
     * @param root Merkle root
     * @param position the expected position of the leaf
     */
    function verify(bytes32[] proof, bytes32 root, bytes32 leaf, uint256 position) internal pure returns (bool) {
        bytes32 computedHash = leaf;

        uint256 i = 0;
        while (i < proof.length) {
            // TODO need SafeMath?
            if (position % 2 == 0) {
                computedHash = keccak256(abi.encodePacked(computedHash, proof[i]));
            } else {
                computedHash = keccak256(abi.encodePacked(proof[i], computedHash));
            }
            position = position / 2;
            i = i + 1;
        }
        // Check if the computed hash (root) is equal to the provided root
        return computedHash == root;
    }
}
