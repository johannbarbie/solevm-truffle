pragma solidity 0.5.2;
pragma experimental ABIEncoderV2;

import "./CompactEVMStack.slb";


library Hash {
    /**
      This function will return the hash of an array
        The function comes with a sibling param which represents hash of all elements at the end of the array
      */
    function toHash(uint256[] memory self, bytes32 sibling) internal pure returns (bytes32) {
        bytes32 hash = sibling;

        for (uint i = 0; i < self.length; i++) {
            assembly {
                mstore(0, hash)
                mstore(0x20, mload(add(add(self, 0x20), mul(i, 0x20))))
                hash := keccak256(0, 0x40)
            }
        }

        return hash;
    }

    /**
      This function will return the hash of a Stack
        It functions is identical to hash of an uint256 array with sibling
      */
    function toHash(CompactEVMStack.Stack memory self) internal pure returns (bytes32) {
        bytes32 hash = self.sibling;

        if (self.size == 0) {
            return hash;
        }

        for (uint256 i = 0; i < self.data.length; i++) {
            hash = keccak256(abi.encodePacked(hash, self.data[i]));
            // assembly {
            //     mstore(0, hash)
            //     mstore(0x20, mload(add(add(add(self, 0x40), 0x20), mul(i, 0x20))))
            //     hash := keccak256(0, 0x40)
            // }
        }

        hash = keccak256(abi.encodePacked(hash, self.size));

        // assembly {
        //     mstore(0, hash)
        //     mstore(0x20, self)
        //     hash := keccak256(0, 0x40)
        // }

        return hash;
    }
}
