pragma solidity ^0.5.2;
pragma experimental ABIEncoderV2;

import {MemOps} from "./MemOps.slb";


library EVMUtils {

    function toUint(bytes memory bts, uint addr, uint numBytes) internal pure returns (uint data) {
        assert(32 >= numBytes && numBytes > 0 && addr + numBytes <= bts.length);
        assembly {
            data := mload(add(add(bts, 0x20), addr))
        }
        data = data >> 8 * (32 - numBytes);
    }

    function fromUint(uint x) internal pure returns (bytes memory bts) {
        bts = new bytes(32);
        assembly {
            mstore(add(bts, 0x20), x)
        }
    }

    function copy(bytes memory src, bytes memory dest, uint srcIdx, uint destIdx, uint len) internal pure {
        assert(srcIdx + len <= src.length);
        assert(destIdx + len <= dest.length);
        uint srcMPtr;
        uint destMPtr;
        assembly {
            srcMPtr := add(add(src, srcIdx), 0x20)
            destMPtr := add(add(dest, destIdx), 0x20)
        }
        MemOps.memcopy(srcMPtr, destMPtr, len);
    }

    // solhint-disable-next-line function-max-lines
    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {
        bytes memory tempBytes;

        assembly {
            // Get a location of some free memory and store it in tempBytes as
            // Solidity does for memory variables.
            tempBytes := mload(0x40)

            // Store the length of the first bytes array at the beginning of
            // the memory for tempBytes.
            let length := mload(_preBytes)
            mstore(tempBytes, length)

            // Maintain a memory counter for the current write location in the
            // temp bytes array by adding the 32 bytes for the array length to
            // the starting location.
            let mc := add(tempBytes, 0x20)
            // Stop copying when the memory counter reaches the length of the
            // first bytes array.
            let end := add(mc, length)

            for {
                // Initialize a copy counter to the start of the _preBytes data,
                // 32 bytes into its memory.
                let cc := add(_preBytes, 0x20)
            } lt(mc, end) {
                // Increase both counters by 32 bytes each iteration.
                mc := add(mc, 0x20)
                cc := add(cc, 0x20)
            } {
                // Write the _preBytes data into the tempBytes memory 32 bytes
                // at a time.
                mstore(mc, mload(cc))
            }

            // Add the length of _postBytes to the current length of tempBytes
            // and store it as the new length in the first 32 bytes of the
            // tempBytes memory.
            length := mload(_postBytes)
            mstore(tempBytes, add(length, mload(tempBytes)))

            // Move the memory counter back from a multiple of 0x20 to the
            // actual end of the _preBytes data.
            mc := end
            // Stop copying when the memory counter reaches the new combined
            // length of the arrays.
            end := add(mc, length)

            for {
                let cc := add(_postBytes, 0x20)
            } lt(mc, end) {
                mc := add(mc, 0x20)
                cc := add(cc, 0x20)
            } {
                mstore(mc, mload(cc))
            }

            // Update the free-memory pointer by padding our last write location
            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the
            // next 32 byte block, then round down to the nearest multiple of
            // 32. If the sum of the length of the two arrays is zero then add
            // one before rounding down to leave a blank 32 bytes (the length block with 0).
            mstore(0x40, and(
                add(add(end, iszero(add(length, mload(_preBytes)))), 31),
                not(31) // Round down to the nearest 32 bytes.
            ))
        }

        return tempBytes;
    }

    function newAddress(address addr, uint8 nonce) internal pure returns (address) {
        assert(addr != address(0));
        assert(nonce > 0);
        uint8 nonceM1 = uint8(nonce - 1);
        // TODO look into addresses with highest order bytes that are zero.
        if (nonceM1 < 0x80) {
            return address(
                uint256(
                    keccak256(
                        abi.encodePacked(
                            uint8(0xd6),
                            uint8(0x94),
                            addr,
                            nonceM1
                        )
                    )
                )
            );
        } else {
            return address(
                uint256(
                    keccak256(
                        abi.encodePacked(
                            uint8(0xd7),
                            uint8(0x94),
                            addr,
                            uint8(0x81),
                            nonceM1
                        )
                    )
                )
            );
        }
    }
}
